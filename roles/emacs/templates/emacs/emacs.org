#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el :mkdirp yes

* Startup
** Profiling

#+begin_src emacs-lisp
  ;; show package loading
  ;; (setq use-package-verbose t)
  ;; Minimize garbage collection during startup
  (setq gc-cons-threshold most-positive-fixnum)
  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+end_src

** Server

#+begin_src emacs-lisp
  (server-start)
  (custom-set-variables '(server-kill-new-buffers t))
  (add-hook 'server-done-hook (lambda () (delete-frame)))
#+end_src

** Package System

#+begin_src emacs-lisp
  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)

  (require 'straight-x)
#+end_src

** Diminish

#+begin_src emacs-lisp
  (use-package diminish
    :straight t)
#+end_src

** Provide shell PATH to Emacs

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :init
    (setq exec-path-from-shell-arguments nil)
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Startup benchmark

#+begin_src emacs-lisp
  (use-package benchmark-init
  :disabled
  :straight t
  ;; :ensure t
  :config
  ;; To disable collection of benchmark data after init is done.
  (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src

** Clean .emacs.d

#+begin_src emacs-lisp
  ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url/history" user-emacs-directory))

  ;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (use-package no-littering :straight t)

  ;; Keep customization settings in a temporary file (thanks Ambrevar!)
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)
#+end_src

* Basic configuration
** Some basics

#+begin_src emacs-lisp
  ;; reduce warning leve
  (setq warning-minimum-level :error)

  (setq-default custom-file null-device)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.cache/emacs/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.cache/emacs/auto-save/" t)))

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top

  ;; Turn off the blinking cursor
  (blink-cursor-mode -1)

  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)

  ;; Don't count two spaces after a period as the end of a sentence.
  ;; Just one space is needed.
  (setq sentence-end-double-space nil)

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)          ; Disable the menu bar
  (tab-bar-mode -1)

  (global-visual-line-mode)
  (diminish 'visual-line-mode)

  (setq uniquify-buffer-name-style 'forward)

  ;; Don't beep at me
  ;;(setq visible-bell t)

  ;; Prevent emacs from automatically exiting
  (setq confirm-kill-emacs 'y-or-n-p)

  (setq browse-url-generic-program (executable-find "~/.local/bin/choose-browser")
        browse-url-browser-function 'browse-url-generic)

  ;; Faced an error that this var is void
  (setq read-symbol-positions-list nil)
#+end_src

** Attempt to configure smooth scroll

#+begin_src emacs-lisp
  ;; Autosave every 500 typed characters
  (setq auto-save-interval 1000)

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)) ;; one line at a time
        mouse-wheel-progressive-speed nil ;; don't accelerate scrolling
        mouse-wheel-follow-mouse 't) ;; scroll window under mouse

  (setq redisplay-dont-pause t
        scroll-margin 3
        scroll-step 1
        scroll-conservatively 10000
        scroll-preserve-screen-position 1)
#+end_src

** Font Configuration

#+begin_src emacs-lisp
  ;; (defvar view/default-font "FiraMono Nerd Font Mono")
  ;; (defvar view/default-font-size 140)

  (set-face-attribute 'default nil :font "FiraMono Nerd Font" :height 140)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "FiraMono Nerd Font Mono" :height 145 :weight 'regular)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "FiraMono Nerd Font" :height 135 :weight 'regular)
#+end_src

** Ediff

#+begin_src emacs-lisp
  (defun command-line-diff (switch)
    (let ((file1 (pop command-line-args-left))
          (file2 (pop command-line-args-left)))
      (ediff file1 file2)))

  (add-to-list 'command-switch-alist '("diff" . command-line-diff))

  ;; saner ediff default
  (setq ediff-diff-options "-w")
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src

* Keybinding Configuration
** Tab-prefix

#+begin_src emacs-lisp
  (define-key tab-prefix-map (kbd "t") 'tab-new)
  (define-key tab-prefix-map (kbd "q") 'tab-close)
  (define-key tab-prefix-map (kbd "o") 'tab-close-other)

  (dolist (key '("0" "1" "2"))
    (define-key tab-prefix-map key nil))
#+end_src

** Frame-prefix

#+begin_src emacs-lisp
  (define-key ctl-x-5-map (kbd "f") 'make-frame-command)
  (define-key ctl-x-5-map (kbd "q") 'delete-frame)
  (define-key ctl-x-5-map (kbd "o") 'delete-other-frames)

  (dolist (key '("0" "1" "2"))
    (define-key ctl-x-5-map key nil))
#+end_src

** X-menu

#+begin_src emacs-lisp
  ;; (define-key ctl-x-map (kbd "x") 'execute-extended-command)
  (define-key ctl-x-map (kbd "e") 'eval-last-sexp)

  (dolist (key '("(" ")" "q"))
    (define-key ctl-x-map key nil))
#+end_src

** General

#+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :straight t
    :config
    (general-create-definer leaders/main
      :states '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    ;; (general-create-definer leaders/second
    ;;   :states '(normal visual emacs insert)
    ;;   :which-key "second-menu"
    ;;   :prefix "M-SPC"
    ;;   :global-prefix "M-SPC")

    (leaders/main
      ;; "e" '(:ignore t :which-key "_reserved_")
      ;; "v" '(:ignore t :which-key "_reserved_")
      ;; "r" '(:ignore t :which-key "_reserved_")
      ;; "x" '(:ignore t :which-key "_reserved_")
      ;; "hh" '(:ignore t :which-key "_reserved_")

      "a" '(org-agenda :which-key "agenda")
      "c" '(:ignore t :which-key "capture")
      "i"  '(:ignore t :which-key "insert")
      ;; bookmarks
      "b"  '(:ignore t :which-key "buffer-bookmark")
      "bk" 'kill-buffer
      "bb" 'bookmark-set
      ;; find
      "f"  '(:ignore t :which-key "find")
      "fd"  '(dired-jump :which-key "in-dired")
      "fO" '(find-file :which-key "file")
      ;; Help
      "h"  'help-command
      ;;Git
      "g"  '(:ignore t :which-key "git")
      ;; C-x
      ;; "x"  (general-simulate-key "C-x")
      ;;"c"  '(:ignore t :which-key "code")
      ;;"c"  (general-simulate-key "C-c" :which-key "c-action")
      "x"  '(:ignore t :which-key "eXtra")
      ;; settings
      "t"  '(:ignore t :which-key "toggles")
      "tw" 'whitespace-mode
      "te" '(:ignore t :which-key "encoding")
      "te" (general-simulate-key "C-x RET")
      ;; "SPC" (general-simulate-key "M-SPC")
      ))
#+end_src

** Evil

#+begin_src emacs-lisp
  (defun evil-window-vsplit-and-focus ()
    "Spawn a new window right of the current one and focus it."
    (interactive)
    (evil-window-vsplit)
    (windmove-right))

  (defun evil-window-split-and-focus ()
    "Spawn a new window below the current one and focus it."
    (interactive)
    (evil-window-split)
    (windmove-down))

  (defun insert-mark ()
    (interactive)
    (insert "`"))

  (use-package evil
    :straight t
    :after general
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-want-C-u-scroll t
          evil-respect-visual-line-mode t
          evil-undo-system 'undo-tree
          evil-kill-on-visual-paste nil)
    :config
    (evil-mode 1)

    (general-define-key
     :keymaps 'evil-insert-state-map
     "C-g" 'evil-normal-state
     "C-h" 'evil-delete-backward-char-and-join)

    (general-define-key
     :states 'normal
     :keymaps 'override
     "`" nil
     "`a" 'insert-mark
     "C-j" 'evil-window-down
     "C-k" 'evil-window-up
     "C-l" 'evil-window-right
     "C-h" 'evil-window-left
     "S" 'newline-and-indent
     ";" 'eval-expression)

    (general-define-key
     :keymaps 'override
     "s-x" 'execute-extended-command)

    (general-def 'motion
      "j" 'evil-next-visual-line
      "k" 'evil-previous-visual-line)

    (general-define-key
     :prefix "C-w"
     :states 'normal
     ;; tabs
     "t" (general-simulate-key "C-x t")
     ;; windows
     "r" 'window-resize/body
     "q" 'evil-window-delete
     "C-q" 'evil-window-delete
     "s" 'evil-window-split-and-focus
     "v" 'evil-window-vsplit-and-focus
     ;; buffers
     "d" 'evil-delete-buffer
     "C-d" 'evil-delete-buffer
     ;; frames
     "f" (general-simulate-key "C-x 5"))

    (general-define-key
     :states 'normal
     ;; "S" "mzi<CR><ESC>`z"
     ;; "J" "mzJ`z"
     "Y" "y$"
     "H" "^"
     "L" "$")

    (general-define-key
     :states 'visual
     "H" "^"
     "L" "$"
     "<" (lambda ()
           (interactive)
           (evil-shift-left (region-beginning) (region-end))
           (evil-normal-state)
           (evil-visual-restore))
     ">" (lambda ()
           (interactive)
           (evil-shift-right (region-beginning) (region-end))
           (evil-normal-state)
           (evil-visual-restore)))

    (defadvice
        evil-search-forward
        (after evil-search-forward-recenter activate)
      (recenter))
    (ad-activate 'evil-search-forward)

    (defadvice
        evil-search-next
        (after evil-search-next-recenter activate)
      (recenter))
    (ad-activate 'evil-search-next)

    (defadvice
        evil-search-previous
        (after evil-search-previous-recenter activate)
      (recenter))
    (ad-activate 'evil-search-previous))

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'treemacs-mode 'emacs)
  (evil-set-initial-state 'calc-mode 'emacs)
  (evil-set-initial-state 'dashboard-mode 'normal)

  (use-package evil-collection
    :straight t
    :after (evil general)
    ;; :init
    ;; (setq evil-collection-mode-list '(not evil-collection-)
    :config
    (evil-collection-init))

  (use-package evil-nerd-commenter
    :straight t
    :after (evil general)
    :config
    (general-define-key
     :states 'normal
     "gc" 'evilnc-comment-operator)
    (general-define-key
     :states 'visual
     "gc" 'evilnc-comment-or-uncomment-lines))

  (use-package evil-numbers
    :straight t
    :after (evil general)
    :config
    (general-define-key
     :states '(normal visual)
     "+" 'evil-numbers/inc-at-pt
     "-" 'evil-numbers/dec-at-pt))
#+end_src

* General UI configuration
** Auto-Save Changed Files
*** Auto-Save

#+begin_src emacs-lisp
  (use-package super-save
    :straight t
    :defer 1
    :diminish super-save-mode
    :config
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t)
    ;; turning off default auto-save
    (setq auto-save-default nil)
    ;; turning off remote files autosaving
    (setq super-save-remote-files nil))
#+end_src

*** Auto-Revert

#+begin_src emacs-lisp
  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)
#+end_src

** Better Jumper

#+begin_src emacs-lisp
  (use-package better-jumper
    :straight t
    :config
    (advice-add 'cider-find-var :before 'better-jumper-set-jump)
    (advice-add 'org-open-at-point-global :before 'better-jumper-set-jump)
    (advice-add 'org-roam-node-find :before 'better-jumper-set-jump)
    (advice-add 'markdown-do :before 'better-jumper-set-jump)

    (general-define-key
     :keymaps 'evil-normal-state-map
     "C-o" 'better-jumper-jump-backward
     "C-i" 'better-jumper-jump-forward)
    (better-jumper-mode +1))
#+end_src

** Better Modeline

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :straight t)

  (use-package minions
    :straight t
    :hook (doom-modeline-mode . minions-mode))

  (use-package doom-modeline
    :straight t
    :custom-face
    (mode-line ((t (:height 0.85))))
    (mode-line-inactive ((t (:height 0.85))))
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-height 15)
    (doom-modeline-bar-width 6)
    ;; (doom-modeline-lsp t)
    (doom-modeline-minor-modes t)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-major-mode-icon nil))
#+end_src

** Clipboard

#+begin_src emacs-lisp
  ;; (setq wl-copy-process nil)

  ;; (defun wl-copy (text)
  ;;   (setq wl-copy-process (make-process :name "wl-copy"
  ;;                                       :buffer nil
  ;;                                       :command '("wl-copy" "-f" "-n")
  ;;                                       :connection-type 'pipe))
  ;;   (process-send-string wl-copy-process text)
  ;;   (process-send-eof wl-copy-process))

  ;; (defun wl-paste ()
  ;;   (if (and wl-copy-process (process-live-p wl-copy-process))
  ;;       nil ; should return nil if we're the current paste owner
  ;;     (shell-command-to-string "wl-paste -n")))

  ;; (setq interprogram-cut-function 'wl-copy)
  ;; (setq interprogram-paste-function 'wl-paste)
#+end_src

** Command Log Mode

#+begin_src emacs-lisp
  (use-package command-log-mode
    :straight t
    :commands command-log-mode)
#+end_src

** Consult

#+begin_src emacs-lisp
  (defun get-project-root ()
    (when (fboundp 'projectile-project-root)
      (projectile-project-root)))

  (use-package consult
    :straight t
    :after projectile
    :demand t
    :defines consult-buffer-sources
    :bind (("C-s" . consult-line)
           :map minibuffer-local-map
           ("C-," . consult-preview-at-point)
           ("C-r" . consult-history))
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :custom
    (consult-project-root-function #'get-project-root)
    (completion-in-region-function #'consult-completion-in-region)
    (consult-async-min-input 1)
    (consult-ripgrep-args "rg --null --line-buffered --color=never --max-columns=1000 --path-separator /   --smart-case --no-heading --line-number --hidden --require-git -g=!'.git/' .")
    (consult-apropos :initial "^")
    (consult-buffer-sources '(consult--source-hidden-buffer
                              consult--source-buffer
                              consult--source-bookmark
                              consult--source-project-buffer))
    :config

    (general-define-key
     :states 'normal
     "/" 'consult-line)

    (leaders/main
      "fb" '(persp-switch-to-buffer* :which-key "buffer")
      "fB" '(consult-buffer :which-key "all-buffers")
      "f/" '(consult-line :which-key "line")
      "ff" '(consult-ripgrep :which-key "in-file")
      "fg" '(consult-git-grep :which-key "git-grep")
      "fG" '(consult-grep :which-key "grep")
      "fi" '(consult-imenu :which-key "in-imenu")
      "fI" '(consult-imenu :which-key "in-imenu-multi")
      "fL" '(consult-locate :which-key "in-locate")
      "fM" '(consult-minor-mode-menu :which-key "minor-mode")
      "fm" '(evil-collection-consult-mark :which-key "mark")
      "fo" '(consult-find :which-key "file")
      "fr" '(consult-register :which-key "register")
      "fu" '(consult-outline :which-key "in-outline")
      "tt" '(consult-theme :which-key "choose theme"))
    ;; (projectile-load-known-projects)
    ;; (setq my-consult-source-projectile-projects
    ;;       `(:name "Projectile projects"
    ;;               :narrow   ?P
    ;;               :category project
    ;;               :action   ,#'projectile-switch-project-by-name
    ;;               :items    ,projectile-known-projects))
    ;; (add-to-list 'consult-buffer-sources my-consult-source-projectile-projects 'append)
    )
#+end_src

** Color Theme

#+begin_src emacs-lisp
  (use-package doom-themes
    :straight t
    :init (load-theme 'doom-one t))
#+end_src

** Dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :disabled
    :straight t
    :config
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))
          dashboard-startup-banner nil
          dashboard-footer-messages nil
          dashboard-footer-icon nil
          dashboard-projects-switch-function 'projectile-persp-switch-project)
    (setq dashboard-items '((agenda . 15)
                            (bookmarks . 5)
                            (projects . 5)))
    (dashboard-setup-startup-hook))
#+end_src

** Dired

#+begin_src emacs-lisp

    (use-package dired
      :ensure nil
      :defer 1
      :commands (dired dired-jump)
      :config
      (setq dired-listing-switches "-aghov --group-directories-first"
            ;; dired-omit-files "^\\.[^.].*"
            dired-omit-verbose nil
            dired-hide-details-hide-symlink-targets nil
            delete-by-moving-to-trash t)

      (autoload 'dired-omit-mode "dired-x")

      (add-hook 'dired-load-hook
                (lambda ()
                  (interactive)
                  (dired-collapse)))

      (add-hook 'dired-mode-hook
                (lambda ()
                  (interactive)
                  (dired-omit-mode 1)
                  (dired-hide-details-mode 1)
                  (hl-line-mode 1)
                  ))

      (use-package dired-rainbow
        :straight t
        :defer 2
        :config
        (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
        (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
        (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
        (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
        (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
        (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
        (dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
        (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
        (dired-rainbow-define log "#c17d11" ("log"))
        (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
        (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
        (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
        (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
        (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
        (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
        (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
        (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
        (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
        (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
        (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))

      (use-package dired-single
        :straight t)

      (use-package dired-ranger
        :straight t
        :defer t)

  (eval-after-load "dired"
    (lambda ()
      (put 'dired-find-alternate-file 'disabled nil)
      (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file)))

      (use-package dired-collapse
        :straight t
        :defer t)

      (evil-collection-define-key 'normal 'dired-mode-map
        "h" 'dired-single-up-directory
        "H" 'dired-omit-mode
        "l" 'dired-single-buffer
        "y" 'dired-ranger-copy
        "P" 'dired-ranger-move
        "p" 'dired-ranger-paste
        (kbd "SPC") nil
        ))
    ;; (general-define-key :states 'normal' :keymaps 'dired-mode-map (kbd "SPC") nil)
#+end_src

** Emojis

#+begin_src emacs-lisp
  (use-package emojify
    :straight t
    :hook (after-init . global-emojify-mode)
    :init
    (setq emojify-company-tooltips-p t))

  (leaders/main
    "ie" 'insert-char
    ;; "iE" 'emoji-insert
    )
#+end_src

** Helpful Help Commands

#+begin_src emacs-lisp
  (use-package helpful
    :straight t
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    ;;  :custom
    ;;  (counsel-describe-function-function #'helpful-callable)
    ;;  (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap apropos-command] . consult-apropos)
    ([remap describe-command] . helpful-command)
    ([remap describe-function] . helpful-function)
    ([remap describe-key] . helpful-key)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable))
#+end_src

** Hydra

#+begin_src emacs-lisp
  (use-package hydra
    :straight t
    :defer 1)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t)
    ("q" nil "finished" :exit t))

  (defhydra window-resize (:timeout 4)
    "resize window"
    ("q" nil :exit t)
    ("j" evil-window-increase-height)
    ("k" evil-window-decrease-height)
    ("l" evil-window-increase-width)
    ("h" evil-window-decrease-width))

  (leaders/main
    "tS" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

** Line numbers

#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)

  (setq display-line-numbers-type 'relative)
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  treemacs-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Minibuffer

#+begin_src emacs-lisp
  (use-package savehist
    :straight t
    :config
    (setq history-length 25)
    (savehist-mode 1))
#+end_src

** Multiple Cursors

https://github.com/hlissner/evil-multiedit

#+begin_src emacs-lisp
  (use-package evil-multiedit
    :straight t
    :after (evil general)
    :config
    (evil-multiedit-default-keybinds))
#+end_src

** PDF[off]

#+begin_src emacs-lisp
  (use-package pdf-tools
    :disabled
    :straight t
    :config
    (pdf-tools-install)
    (setq pdf-view-resize-factor 1.1)
    (setq-default pdf-view-display-size 'fit-page))
#+end_src

** Perspective

#+begin_src emacs-lisp
  (use-package perspective
    :straight t
    ;; :bind
    ;; ("C-x C-b" . persp-list-buffers)   ; or use a nicer switcher, see below
    :custom
    (persp-mode-prefix-key (kbd "C-x C-M-x"))
    (persp-state-default-file (expand-file-name "~/.cache/emacs/persp-state.el"))
    :hook ('kill-emacs-hook . #'persp-state-save)
    :bind (:map perspective-map
                ("l" . 'persp-state-load)
                ("s" . 'persp-state-save)
                ("d" . 'persp-kill)
                ("j" . 'persp-switch)
                ("C-x" . nil)
                ("C-s" . nil)
                ("C-l" . nil))
    :config
    (leaders/main
      "s" (general-simulate-key "C-x C-M-x" :which-key "session"))
    (unless (equal persp-mode t)
      (persp-mode)))
#+end_src

** Popper - advanced popups

#+begin_src emacs-lisp
  (use-package popper
    :straight t
    :config
    (general-define-key
     :states 'normal
     "``" 'popper-toggle-latest
     "M-`" 'popper-cycle
     "s-`" 'popper-cycle
     "C-`" 'popper-toggle-type)
    :init
    (setq popper-reference-buffers
          '(
            ;; "\\*Apropos\\*"
            ;; "\\*Async-native-compile-log\\*"
            ;; "\\*Async Shell Command\\*"
            ;; "\\*cider-doc\\*"
            ;; "\\*cider-result\\*"
            ;; "\\*cider-error\\*"
            "\\*Buffer List\\*"
            ;; "\\*Embark Actions\\*"
            "\\*Embark Collect\\*"
            "\\*Embark Export"
            "\\*envrc\\*"
            "\\*eldoc\\*"
            ;; "\\*helpful"
            ;; "\\*Messages\\*"
            "Output\\*$"
            ;; "Pfuture-Callback"
            ;; "\\*straight-byte-compilation\\*"
            ;; "\\*straight-process\\*"
            ;; "\\*Warnings\\*"
            "\\*org-roam\\*"
            ;; dired-mode
            ;; help-mode
            occur-mode
            messages-mode
            compilation-mode))
    (popper-mode +1)
    (popper-echo-mode +1))

  (setq display-buffer-base-action
        '((display-buffer-reuse-mode-window
           display-buffer-reuse-window
           display-buffer-same-window)))

  (setq even-window-sizes nil)
#+end_src

** Projectile

#+begin_src emacs-lisp
    (use-package projectile
      :straight t
      :diminish projectile-mode
      :config
      (projectile-mode)
      (leaders/main "p" '(projectile-command-map :which-key "projects"))
      (general-define-key
       :keymaps 'projectile-command-map
       "4" nil
       "5" nil
       "a" 'projectile-add-known-project
       "d" 'projectile-remove-known-project
       "D" 'projectile-clear-known-projects
       "C" 'projectile-cleanup-known-projects
       "g" 'projectile-vc)
      ;; :init
      ;; NOTE: Set this to the folder where you keep your Git repos!
      ;; (when (file-directory-p "~/projects")
      ;;   (setq projectile-project-search-path '("~/projects")))
      ;; (setq projectile-switch-project-action #'projectile-dired)
  )
#+end_src

** Persp+Projectile

#+begin_src emacs-lisp
  (use-package persp-projectile
  :straight t
  :after (perspective projectile))
#+end_src

** Saveplace

#+begin_src emacs-lisp
  (use-package saveplace
    :straight t
    :init (setq save-place-limit 100)
    :config (save-place-mode))
#+end_src

** Terminal

https://www.emacswiki.org/emacs/MultiTerm

#+begin_src emacs-lisp
  (defun evil-window-vsplit-and-vterm ()
    "Spawn a new term right of the current one and focus it."
    (interactive)
    (evil-window-vsplit)
    (windmove-right)
    (multi-vterm))

  (defun evil-window-split-and-vterm ()
    "Spawn a new term below the current one and focus it."
    (interactive)
    (evil-window-split)
    (windmove-down)
    (multi-vterm))

  (use-package eterm-256color
    :disabled
    :straight t
    :hook (term-mode . eterm-256color-mode))

  (use-package vterm
    :straight t
    :hook
    (vterm-mode . (lambda () (face-remap-add-relative 'default :background "#000000")))
    :custom
    (vterm-kill-buffer-on-exit t))

  (use-package multi-vterm
    :straight t
    :config

    (general-define-key
     :states 'normal
     "`c" 'multi-vterm
     "`s" 'evil-window-split-and-vterm
     "`v" 'evil-window-vsplit-and-vterm)

    (add-hook 'vterm-mode-hook
              (lambda ()
                (setq-local evil-insert-state-cursor 'box)
                (evil-insert-state)))

    (define-key vterm-mode-map [return] #'vterm-send-return)

    (setq vterm-keymap-exceptions nil)

    (general-define-key
     :states 'normal
     :keymaps 'vterm-mode-map
     "`c"       #'multi-vterm
     "`n"       #'multi-vterm-next
     "`p"       #'multi-vterm-prev
     "`s"       'evil-window-split-and-vterm
     "`v"       'evil-window-vsplit-and-vterm)

    (general-define-key
     :states 'insert
     :keymaps 'vterm-mode-map
     "<escape> C-c"      'evil-normal-state
     "<escape> c"        'evil-normal-state
     "<escape> C-j"      'evil-window-down
     "<escape> j"        'evil-window-down
     "<escape> C-k"      'evil-window-up
     "<escape> k"        'evil-window-up
     "<escape> C-l"      'evil-window-right
     "<escape> l"        'evil-window-right
     "<escape> C-h"      'evil-window-left
     "<escape> h"        'evil-window-left
     "C-c"               #'vterm--self-insert
     "C-g"               #'vterm--self-insert
     "C-j"               #'vterm--self-insert
     "C-h"               #'vterm--self-insert
     "C-SPC"             #'vterm--self-insert
     "<escape><escape>"  #'vterm-send-escape))
#+end_src

** Tramp

#+begin_src emacs-lisp
  (setq tramp-default-method "ssh")
#+end_src

** Treemacs
*** Prerequisites

#+begin_src emacs-lisp
  (defun treemacs-visit-node-vertical-split-of-recently-used-window (&optional arg)
    "Open current file or tag by vertically splitting `get-mru-window'.
      Stay in the current window with a single prefix argument ARG, or close the
      treemacs window with a double prefix argument."
    (interactive "P")
    (treemacs--execute-button-action
     :dir-action (dired (treemacs-safe-button-get btn :path))
     :file-action (find-file (treemacs-safe-button-get btn :path))
     :split-function #'split-window-vertically
     :tag-action (treemacs--goto-tag btn)
     :tag-section-action (treemacs--visit-or-expand/collapse-tag-node btn arg nil)
     :window-arg arg
     :window (get-mru-window (selected-frame) nil :not-selected)
     :no-match-explanation "Node is neither a file, a directory or a tag - nothing to do here."))

  (defun treemacs-visit-node-horizontal-split-of-recently-used-window (&optional arg)
    "Open current file or tag by horizontally splitting `get-mru-window'.
  Stay in the current window with a single prefix argument ARG, or close the
  treemacs window with a double prefix argument."
    (interactive "P")
    (treemacs--execute-button-action
     :dir-action (dired (treemacs-safe-button-get btn :path))
     :file-action (find-file (treemacs-safe-button-get btn :path))
     :split-function #'split-window-horizontally
     :tag-action (treemacs--goto-tag btn)
     :tag-section-action (treemacs--visit-or-expand/collapse-tag-node btn arg nil)
     :window-arg arg
     :window (get-mru-window (selected-frame) nil :not-selected)
     :no-match-explanation "Node is neither a file, a directory or a tag - nothing to do here."))
#+end_src

*** Installation

https://github.com/Alexander-Miller/treemacs

#+begin_src emacs-lisp
  (use-package treemacs
    :straight t
    ;; :ensure t
    :commands (treemacs-select-window treemacs-find-file)
    :defer t
    :init
    (leaders/main
      "fp" '(treemacs-find-file :which-key "file-by-path"))
    :config
    (progn
      (set-face-attribute 'treemacs-root-face nil :inherit 'fixed-pitch :height 1.0)

      (setq treemacs-litter-directories '("/node_modules" "/.venv" "/.cask")
            treemacs-wide-toggle-width 70
            treemacs-width 35
            treemacs-default-visit-action 'treemacs-visit-node-in-most-recently-used-window
            treemacs-project-follow-cleanup nil
            treemacs-follow-after-init nil
            treemacs-recenter-after-file-follow t
            treemacs-read-string-input 'from-minibuffer)

      (treemacs-follow-mode -1)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))
      (treemacs-hide-gitignored-files-mode nil)

      (general-define-key
       :keymaps 'treemacs-mode-map
       "D" 'treemacs-delete-file
       "d" 'dired-jump
       "H" 'treemacs-root-up
       "L" 'treemacs-root-down
       "C-l" 'evil-window-right
       "C-h" 'evil-window-left
       "S" 'treemacs-resort
       "s" 'treemacs-visit-node-vertical-split-of-recently-used-window
       "v" 'treemacs-visit-node-horizontal-split-of-recently-used-window
       "j" 'treemacs-next-line
       "k" 'treemacs-previous-line
       "C-d" 'evil-scroll-down
       "C-u" 'evil-scroll-up
       "C-e" 'evil-scroll-line-down
       "C-y" 'evil-scroll-line-up
       "G" 'evil-goto-line
       "/" 'evil-search-forward
       "w" (list treemacs-workspace-map :which-key "workspace")
       "p" (list treemacs-project-map :which-key "project")
       "g" 'nil
       "gg" 'evil-goto-first-line)

      (general-define-key
       :keymaps 'treemacs-node-visit-map
       "h" 'treemacs-visit-node-vertical-split-of-recently-used-window
       "s" 'treemacs-visit-node-vertical-split-of-recently-used-window
       "v" 'treemacs-visit-node-horizontal-split-of-recently-used-window)

      (general-define-key
       :keymaps 'treemacs-workspace-map
       "s" nil
       "j" 'treemacs-switch-workspace)

      (advice-add 'treemacs-find-file :after 'treemacs-select-window)))

  (use-package treemacs-projectile
    :straight t
    :after (treemacs projectile)
    :defer t)

  (use-package treemacs-icons-dired
    :straight t
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :after treemacs
    :defer t)

  (use-package treemacs-magit
    :straight t
    :after (treemacs magit)
    :defer t)

  (use-package treemacs-perspective
    :straight t
    :after (treemacs perspective)
    :config
    (treemacs-set-scope-type 'Perspectives))

#+end_src

** Undo Tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :straight t
    :init
    (global-undo-tree-mode 1)
    (setq undo-tree-auto-save-history t
          undo-tree-history-directory-alist '(("." . "~/.cache/emacs/undo")))
    :config
    (add-hook 'evil-local-mode-hook 'turn-on-undo-tree-mode)
    (leaders/main
      "U" '(undo-tree-visualize :which-key "undo-tree")))

#+end_src

** Which Key

#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.3))

  (use-package which-key-posframe
    :straight t
    :config
    (setq which-key-posframe-poshandler 'posframe-poshandler-frame-bottom-center)
    (which-key-posframe-mode))
#+end_src

** Winner Mode

#+begin_src emacs-lisp
  (use-package winner
    :straight t
    :config
    (winner-mode 1)
    (defhydra hydra-winner (:timeout 4)
      "scale text"
      ("j" winner-redo "redo")
      ("k" winner-undo "undo")
      ("f" nil "finished" :exit t)
      ("q" nil "finished" :exit t))
    (leaders/main
      "w" 'hydra-winner/body))
#+end_src

** Writeroom

#+begin_src emacs-lisp
  (use-package writeroom-mode
    :straight t
    :config
    (leaders/main
      "tz" 'writeroom-mode))
#+end_src

** Zoom(autozoom)

#+begin_src emacs-lisp
  (use-package zoom
    :straight t
    :config
    (defun size-callback ()
      (cond ((> (frame-pixel-width) 1280) '(90 . 0.75))
            (t                            '(0.5 . 0.5))))
    (custom-set-variables
     '(temp-buffer-resize-mode t)
     '(zoom-size 'size-callback)
     '(zoom-mode t)))
#+end_src

* Development
** Align

#+begin_src emacs-lisp
  (use-package evil-lion
    :straight t
    :bind (:map evil-normal-state-map
                ("g a " . evil-lion-left)
                ("g A " . evil-lion-right)
                :map evil-visual-state-map
                ("g a " . evil-lion-left)
                ("g A " . evil-lion-right)))
#+end_src

** Cleanup whitespaces

#+begin_src emacs-lisp
  (use-package ws-butler
    :straight t
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode)))
#+end_src

** Completion
*** Corfu

#+begin_src emacs-lisp
  (use-package corfu
    :disabled
    :bind (:map corfu-map
                ("C-j" . corfu-next)
                ("C-k" . corfu-previous)
                ("C-f" . corfu-insert))
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    :config
    (corfu-global-mode))
#+end_src

*** Company

#+begin_src emacs-lisp

  (use-package company
    :straight t
    :bind (("C-l" . company-complete)
           :map company-active-map
           ("C-m" . nil)
           ("<return>" . nil)
           ("C-f" . #'company-complete-selection))
    :init
    (setq company-minimum-prefix-length 2
          company-tooltip-limit 14
          company-tooltip-align-annotations t
          company-require-match 'never
          company-global-modes '(not erc-mode message-mode help-mode)
          company-frontends
          '(company-pseudo-tooltip-frontend ; always show candidates in overlay tooltip
            company-echo-metadata-frontend) ; show selected candidate docs in echo area
          company-backends '((company-capf company-yasnippet :separate)
                             (company-dabbrev company-ispell :separate)
                             company-files)
          company-auto-complete nil
          company-auto-complete-chars nil
          company-dabbrev-other-buffers nil
          company-dabbrev-ignore-case nil
          company-dabbrev-downcase nil)
    :config
    (setq org-roam-completion-everywhere t
          company-idle-delay 0.35
          ;; company-require-match nil
          ;; company-selection-wrap-around t
          ;; company-tooltip-align-annotations t
          )
    (global-company-mode)

    (general-define-key
     :states 'insert
     :keymaps 'override
     "C-x f" 'company-files)

    (define-key evil-insert-state-map (kbd "C-n") nil)
    (define-key evil-insert-state-map (kbd "C-p") nil)
    (define-key evil-insert-state-map (kbd "C-k") nil))

  (use-package company-box
    :straight t
    :hook (company-mode . company-box-mode))
  ;; (use-package company-quickhelp
  ;;   :straight t
  ;;   :after 'company
  ;;   :bind (:map company-active-map
  ;;               ("C-i" . company-quickhelp-manual-begin))
  ;;   :config
  ;;   ;; (define-key company-active-map (kbd "C-h") #'company-quickhelp-manual-begin)
  ;;   (company-quickhelp-mode))
#+end_src

*** Embark

#+begin_src emacs-lisp
  (use-package embark
    :straight t
    :init
    (setq prefix-help-command #'embark-prefix-help-command)
    :bind (("C-." . embark-act)
           ([remap describe-bindings] . embark-bindings)
           :map evil-normal-state-map
           ("C-." . embark-act)
           :map minibuffer-local-map
           ("C-." . embark-act))
    :config
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none))))

    (setq embark-action-indicator
          (lambda (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator)
    )

  (use-package wgrep
    :straight t
    :config

    (leaders/main
     :keymaps 'grep-mode-map
     "e" 'wgrep-change-to-wgrep-mode))

  (use-package embark-consult
    :straight '(embark-consult :host github
                               :repo "oantolin/embark"
                               :files ("embark-consult.el"))
    :after (embark consult wgrep)
    :demand t
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

*** Vertico

#+begin_src emacs-lisp
  (defun minibuffer-backward-kill (arg)
    (interactive "p")
    (if minibuffer-completing-file-name
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
      (kill-backward-chars arg)))

  (use-package vertico
    :straight t
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-d" . vertico-scroll-up)
                ("C-u" . vertico-scroll-down)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("DEL" . minibuffer-backward-kill))
    :custom
    (vertico-cycle t)
    :custom-face
    (vertico-current ((t (:background "#3a3f5a"))))
    :init
    (vertico-mode))
#+end_src

*** Orderless

#+begin_src emacs-lisp
  (use-package orderless
    :straight t
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src

*** Marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    :straight t
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

** Direnv

Should be late to be first

#+begin_src emacs-lisp
  (use-package envrc
    :straight t
    :config
    (envrc-global-mode))
  ;; :hook (
  ;;        (clojure-mode . envrc-mode)
  ;;        (python-mode . envrc-mode)))
#+end_src

** Folding

#+begin_src emacs-lisp
  (use-package origami
    :straight t
    :hook (yaml-mode . origami-mode))
#+end_src

** Highlight Parens

#+begin_src emacs-lisp
  (use-package paren
    :straight t
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))
#+end_src

** Smart Parens

https://github.com/Fuco1/smartparens

#+begin_src emacs-lisp
  ;; test:
  ;; [1 2 (2 (((3 4))) (1 2) 1)]

  ;; Puni
  (use-package puni
    :straight t
    :disabled
    :defer t
    :init
    ;; The autoloads of Puni are set up so you can enable `puni-mode` or
    ;; `puni-global-mode` before `puni` is actually loaded. Only after you press
    ;; any key that calls Puni commands, it's loaded.
    (puni-global-mode)
    (add-hook 'term-mode-hook #'puni-disable-puni-mode))

  (defun sp-wrap-d-quote ()
    (interactive)
    (sp-wrap-with-pair "\""))

  (defun sp-wrap-quote ()
    (interactive)
    (sp-wrap-with-pair "'"))

  (defun sp-wrap-round-header ()
    (interactive)
    (sp-wrap-with-pair "(")
    (evil-insert 1))

  (defun sp-wrap-round-tail ()
    (interactive)
    (sp-wrap-with-pair "(")
    (sp-end-of-sexp)
    (evil-insert 1))

  (defun sp-wrap-square-header ()
    (interactive)
    (sp-wrap-with-pair "[")
    (evil-insert 1))

  (defun sp-wrap-square-tail ()
    (interactive)
    (sp-wrap-with-pair "[")
    (sp-end-of-sexp)
    (evil-insert 1))

  (defun sp-wrap-curly-header ()
    (interactive)
    (sp-wrap-with-pair "{")
    (evil-insert 1))

  (defun sp-wrap-curly-tail ()
    (interactive)
    (sp-wrap-with-pair "{")
    (sp-end-of-sexp)
    (evil-insert 1))

  (use-package smartparens
    :straight t
    :after evil
    :config
    ;; Load default config
    (require 'smartparens-config)
    ;; Configuration
    (setq sp-max-prefix-length 25
          sp-max-pair-length 4
          sp-highlight-pair-overlay nil
          sp-highlight-wrap-overlay nil
          sp-highlight-wrap-tag-overlay nil)

    ;; evil specific
    (setq sp-show-pair-from-inside t
          sp-cancel-autoskip-on-backward-movement nil
          sp-pair-overlay-keymap (make-sparse-keymap))

    (let ((unless-list '(sp-point-before-word-p
                         sp-point-after-word-p
                         sp-point-before-same-p)))
      (sp-pair "'"  nil :unless unless-list)
      (sp-pair "\"" nil :unless unless-list))

    (sp-local-pair sp-lisp-modes "(" ")" :unless '(:rem sp-point-before-same-p))
    (smartparens-global-mode t)

    (sp-local-pair '(emacs-lisp-mode org-mode markdown-mode gfm-mode)
                   "[" nil :post-handlers '(:rem ("| " "SPC")))

    (dolist (brace '("(" "{" "["))
      (sp-pair brace nil
               :post-handlers '(("||\n[i]" "RET") ("| " "SPC"))
               :unless '(sp-point-before-word-p sp-point-before-same-p)))

    (general-define-key
     :states 'normal
     :prefix "\\"
     :keymaps 'smartparens-mode-map
     "c" 'sp-clone-sexp

     "a" '(:ignore t :which-key "sp-append-el")
     "a" (lambda ()
           (interactive)
           (sp-backward-down-sexp)
           (evil-append 1))

     "A" '(:ignore t :which-key "sp-wrap-append-el")
     "A" (lambda ()
           (interactive)
           (sp-backward-down-sexp)
           (sp-wrap-round-tail))

     "i" '(:ignore t :which-key "sp-insert-el")
     "i" (lambda ()
           (interactive)
           (sp-backward-up-sexp)
           (insert " ")
           (backward-char)
           (evil-insert 1))

     "I" '(:ignore t :which-key "sp-wrap-insert-el")
     "I" (lambda ()
           (interactive)
           (sp-backward-up-sexp)
           (sp-wrap-with-pair "(")
           (evil-insert 1)
           ;; (sp-wrap-round-header)
           )

     "h" '(:ignore t :which-key "sp-insert-first")
     "h" (lambda ()
           (interactive)
           ;; (sp-up-sexp)
           (sp-beginning-of-sexp)
           (evil-insert 1))
     "l" '(:ignore t :which-key "sp-insert-last")
     "l" (lambda ()
           (interactive)
           ;; (sp-up-sexp)
           (sp-end-of-sexp)
           (evil-insert 1))

     "J" 'sp-join-sexp
     "o" 'sp-unwrap-sexp
     "?" 'sp-convolute-sexp
     "s" 'sp-splice-sexp
     "S" 'sp-split-sexp

     "(" 'sp-wrap-round-header
     ")" 'sp-wrap-round-tail
     "[" 'sp-wrap-square-header
     "]" 'sp-wrap-square-tail
     "{" 'sp-wrap-curly-header
     "}" 'sp-wrap-curly-tail)

    (general-define-key
     :states 'visual
     :keymaps 'smartparens-mode-map
     "\\(" 'sp-wrap-round-header
     "\\)" 'sp-wrap-round-tail
     "\\[" 'sp-wrap-square-header
     "\\]" 'sp-wrap-square-tail
     "\\{" 'sp-wrap-curly-header
     "\\}" 'sp-wrap-curly-tail

     "S" nil
     "S[" 'sp-wrap-square
     "S]" 'sp-wrap-square
     "S(" 'sp-wrap-round
     "S)" 'sp-wrap-round
     "S{" 'sp-wrap-curly
     "S}" 'sp-wrap-curly
     "S'" 'sp-wrap-quote
     "S\"" 'sp-wrap-d-quote)

    (general-define-key
     :states '(normal visual)
     :keymaps 'smartparens-mode-map
     "M-L" 'sp-forward-slurp-sexp
     "M-K" 'sp-forward-barf-sexp
     "M-H" 'sp-backward-slurp-sexp
     "M-J" 'sp-backward-barf-sexp))

#+end_src

** LSP
*** Eglot

Alternative LSP engine
https://github.com/joaotavora/eglot

#+begin_src emacs-lisp
  (defun my/load-eglot ()
    (interactive)
    ;; (envrc-mode t)
    ;; (flycheck-mode t)
    (eglot-ensure))

  (use-package eglot
    :straight t
    :config
    (add-to-list 'eglot-stay-out-of 'company)
    (leaders/main
      "l" '(:ignore t :which-key "lsp")
      ;; start lsp
      "ll" 'my/load-eglot)

    (leaders/main
      :states '(normal visual emacs)
      :keymaps 'eglot-mode-map
      ;; code modification
      "la" 'eglot-code-actions
      "lr" 'eglot-rename
      "l=" 'eglot-format-buffer
      ;; navigation
      "ld" 'eglot-find-declaration
      "li" 'eglot-find-implementation
      "lt" 'eglot-find-typeDefinition
      ;; server commands
      "ls" '(:ignore t :which-key "server")
      "lsc" 'eglot-clear-status
      "lsp" 'eglot-forget-pending-continuations
      "lsr" 'eglot-reconnect
      "lss" 'eglot-shutdown
      "lsS" 'eglot-shutdown-all
      "lsC" 'eglot-signal-didChangeConfiguration
      ;; info
      "lo" '(:ignore t :which-key "open-info")
      "lor" 'eglot-stderr-buffer
      "loe" 'eglot-events-buffer)
    ;; (advice-add 'eglot-ensure :before #'envrc-mode)
    ;; (advice-add 'eglot :around #'envrc-propagate-environment)

    ;; (add-to-list 'eglot-server-programs '(clojure-mode . ("clojure-lsp")))
    (add-to-list 'eglot-server-programs '(terraform-mode . ("terraform-ls" "serve"))))

  (use-package consult-eglot
    :straight t
    :defer t
    :after '(consult eglot))
#+end_src

*** Flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :hook (prog-mode . flycheck-mode)
    :defer t)

  (use-package flycheck-elsa
    :straight t
    :defer t
    :after flycheck)
#+end_src

*** LSP-mode

Installation instruction is [[https://emacs-lsp.github.io/lsp-mode/page/installation/][here]]

#+begin_src emacs-lisp
  ;; (leaders/main
  ;;   "tL" '(lsp :which-key "load-lsp"))

  (use-package lsp-mode
    :disabled
    :straight t
    :init
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-lens-enable t)
    :config
    (setq gc-cons-threshold 10000000)
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
    ;; (setq lsp-use-plists t)
    (setq lsp-log-io nil)

    (add-hook 'lsp-mode-hook
              (progn () (general-define-key
                         :states 'normal
                         :keymaps 'lsp-mode-map
                         "gd" 'lsp-find-definition
                         "gr" 'lsp-find-references
                         "K" 'lsp-describe-thing-at-point)
                     (leaders/main
                       :keymaps 'lsp-mode-map
                       "l" (general-simulate-key "C-c l" :which-key "lsp")))
              (lsp-enable-which-key-integration))


    (setq lsp-file-watch-ignored '(
                                   "[/\\\\]\\.direnv$"
                                   "[/\\\\]\\.git$"
                                   "[/\\\\]\\.svn$"
                                   "[/\\\\]\\.tox$"
                                   "[/\\\\]target$"
                                   "[/\\\\]\\.out$"
                                   "[/\\\\]\\.deps$"
                                   "[/\\\\]\\.tmp$"))

    (advice-add 'lsp :before #'envrc-mode)

    ;; :hook ((lsp-mode . lsp-enable-which-key-integration))
    :commands (lsp lsp-deferred))

  ;; optionally
  (use-package lsp-ui
    :disabled
    :defer t
    :straight t
    :after 'lsp-mode
    :hook (lsp-mode . lsp-ui-mode)
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-sideline-show-hover nil)
    (setq lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-show))

  ;; if you are helm user
  ;;(use-package helm-lsp :commands helm-lsp-workspace-symbol)
  (use-package flycheck
    :disabled
    :straight t
    :defer t
    :hook (lsp-mode . flycheck-mode))

  ;; (use-package lsp-treemacs
  ;;   :straight t
  ;;   :commands lsp-treemacs-errors-list)

  (use-package consult-lsp
    :disabled
    :defer t
    :after '(consult lsp-mode)
    :straight (:host github
                     :repo "gagbo/consult-lsp"
                     :files ("*.el")))
#+end_src

*** Debug

#+begin_src emacs-lisp
  (use-package dap-mode
    :straight t
    :defer t
    :custom
    (lsp-enable-dap-auto-configure nil)
    :hook
    (dap-mode . (lambda ()
                  (dap-ui-mode 1)
                  (dap-tooltip-mode 1))))
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+end_src

*** Snippets

#+begin_src emacs-lisp
  (use-package yasnippet
    :defer t
    :straight t
    :hook (prog-mode . yas-minor-mode)
    :after (yasnippet-snippets)
    :config
    (yas-reload-all))

  (use-package yasnippet-snippets
    :defer t
    :straight t)
#+end_src

** Languages
*** Clojure

https://emacs-lsp.github.io/lsp-mode/tutorials/clojure-guide/
https://docs.cider.mx/cider/1.2/usage/misc_features.html

**** clojure-lsp

#+begin_src emacs-lisp
  (use-package clojure-mode
    :straight t
    :config

    (general-define-key
     :keymaps 'clojure-refactor-map
     "ESC" nil
     "TAB" nil
     "C-#" nil
     "C-'" nil
     "C-(" nil
     "C--" nil
     "C-_" nil
     "C-a" nil
     "C-f" nil
     "C-l" nil
     "C-o" nil
     "C-p" nil
     "C-t" nil
     "C-u" nil
     "C-w" nil
     "C-{" nil
     "n" '(:ignore t :which-key "namespace")
     "s" '(:ignore t :which-key "let"))

    (general-define-key
     :keymaps 'cider-start-map
     "C-c" nil
     "C-j" nil
     "C-s" nil
     "C-x" nil
     "c" '(:ignore t :which-key "connect")
     "j" '(:ignore t :which-key "jack-in")
     "s" '(:ignore t :which-key "sibling"))

    ;; (defun evil-collection-cider-lsp ()
    ;;   (general-define-key
    ;;    :states '(normal visual)
    ;;    :keymaps 'cider-mode-map
    ;;    "gd" 'lsp-find-definition
    ;;    "gr" 'lsp-find-references
    ;;    "K" 'lsp-describe-thing-at-point))

    ;; (advice-add 'evil-collection-cider-setup
    ;;             :after 'evil-collection-cider-lsp)

    (leaders/main
      :keymaps 'clojure-mode-map
      "r" (general-simulate-key "C-C C-r" :which-key "clojure-refactor")
      "xc" (general-simulate-key "C-C C-x" :which-key "cider-connect"))

    ;; (add-hook 'clojure-mode-hook 'lsp-deferred)
    ;; (add-hook 'clojurescript-mode-hook 'lsp-deferred)
    ;; (add-hook 'clojurec-mode-hook 'lsp-deferred)

    (setq read-process-output-max (* 1024 1024)
          treemacs-space-between-root-nodes nil
          ;; lsp-lens-enable t
          ;; lsp-signature-auto-activate t
          cider-eldoc-display-for-symbol-at-point nil ; disable cider showing eldoc during symbol at point
          cljr-add-ns-to-blank-clj-files nil))
#+end_src

**** cider

#+begin_src emacs-lisp
  (use-package cider
    :straight t
    ;; :mode "\\.clj[sc]?\\'"
    :hook   ((cider-mode . cider-company-enable-fuzzy-completion)
             (cider-repl-mode . (lambda ()
                                  (setq-local beacon-blink-when-window-scrolls nil)))
             (cider-repl-mode . cider-company-enable-fuzzy-completion)
             (cider-repl-mode . smartparens-mode))
    :config
    (setq cider-print-fn 'fipp
          cider-prompt-for-symbol nil
          cider-repl-display-help-banner nil
          cider-repl-history-file (concat user-emacs-directory ".cider-history")
          cider-repl-history-size 1000
          cider-repl-pop-to-buffer-on-connect nil
          cider-repl-wrap-history t)

    ;; (evil-collection-cider-setup)

    (general-define-key
     :keymaps 'cider-eval-commands-map
     "C-." nil
     "C-b" nil
     "C-c" nil
     "C-d" nil
     "C-e" nil
     "C-l" nil
     "C-n" nil
     "C-o" nil
     "C-r" nil
     "C-v" nil
     "C-w" nil
     "C-z" nil
     "C-f" nil
     "f C-c" nil
     "f C-d" nil
     "f C-e" nil)

    (defun cider-debug-defun-at-point-evil ()
      (interactive)
      (cider-debug-defun-at-point)
      (evil-insert 1))

    (leaders/main
      :keymaps 'cider-mode-map
      "d" '(cider-debug-defun-at-point-evil :which-key "debug")
      "hh" (general-simulate-key "C-c C-d" :which-key "cider-doc")
      "v" (general-simulate-key "C-c C-v" :which-key "cider-eval")
      "xt" (general-simulate-key "C-c ," :which-key "cider-test")
      "xj" (general-simulate-key "C-c C-j" :which-key "cider-insert-command")))
#+end_src

*** Dockerfile/Containerfile

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :straight t
    :mode ("Dockerfile\\'" "Containerfile\\'")
    :config
    ;; (add-hook 'dockerfile-mode-hook 'lsp-deferred)
    (setq dockerfile-mode-command "podman"))
#+end_src

*** Lisp

#+begin_src emacs-lisp

  (leaders/main
    :keymaps 'emacs-lisp-mode-map
    "ve" 'eval-last-sexp)

  (use-package lispy
    :straight t
    :hook ((emacs-lisp-mode . lispy-mode)
           (scheme-mode . lispy-mode)
           (clojure-mode . lispy-mode)
           ))

  ;; (use-package evil-lispy
  ;;   :hook ((lispy-mode . evil-lispy-mode)))

  (use-package lispyville
    :straight t
    :hook ((lispy-mode . lispyville-mode))
    :config
    (lispyville-set-key-theme '(operators c-w additional
                                          additional-movement slurp/barf-cp
                                          prettify)))
#+end_src

*** Json

#+begin_src emacs-lisp
  (use-package json-mode
    :defer t
    :straight t)
#+end_src

*** Nix

#+begin_src emacs-lisp
  (use-package nix-mode
    :straight t
    :defer t
    ;; :hook (nix-mode . 'lsp-deferred)
    :mode "\\.nix\\'")
#+end_src

*** Python

https://emacs-lsp.github.io/lsp-python-ms/

#+begin_src emacs-lisp
  ;; (add-hook 'python-mode 'lsp-deferred)
  ;; (use-package lsp-python-ms
  ;;   :straight t
  ;;   :defer t
  ;;   :init (setq lsp-python-ms-auto-install-server t)
  ;;   :hook (python-mode . (lambda ()
  ;;                          (require 'lsp-python-ms)
  ;;                          (lsp))))  ; or lsp-deferred
#+end_src

*** Rust

#+begin_src emacs-lisp
  (use-package rust-mode
    :straight t
    :mode "\\.rs\\'"
    :init (setq rust-format-on-save t))

  (use-package cargo
    :straight t
    :defer t)
#+end_src

*** Shell

#+begin_src emacs-lisp
  (use-package company-shell
    :straight t
    :defer t
    :after (company-mode)
    :config
    (defun my-sh-mode-hook ()
      (setq-local company-backends
                  '((company-capf
                     company-shell
                     company-shell-env
                     company-fish-shell
                     company-yasnippet :separate))))
    (add-hook 'sh-mode-hook #'my-sh-mode-hook))
#+end_src

*** Terraform

#+begin_src emacs-lisp
  (use-package terraform-mode
    :straight t
    :mode "\\.tf\\'")

  (use-package company-terraform
    :straight t
    :defer t
    :after (company))

  (defun my-terraform-mode-hook ()
    (setq-local company-backends
                '((company-capf
                   company-terraform
                   company-yasnippet
                   :separate))))
  (add-hook 'terraform-mode-hook #'my-terraform-mode-hook)
#+end_src

*** Yaml

#+begin_src emacs-lisp
  (use-package yaml-mode
    :straight t
    :mode "\\.ya?ml\\'")
#+end_src

*** SBT + scala [Not working]

To build `metals-emacs`
#+begin_src bash
  # Make sure to use coursier v1.1.0-M9 or newer.
  curl -L -o coursier https://git.io/coursier-cli
  chmod +x coursier

  ./coursier bootstrap \
             --java-opt -Xss4m \
             --java-opt -Xms100m \
             --java-opt -Dmetals.client=emacs \
             org.scalameta:metals_2.12:0.11.1 \
             -r bintray:scalacenter/releases \
             -r sonatype:snapshots \
             -o ~/.local/bin/metals-emacs -f

  ls -la ~/.local/bin/metals-emacs
#+end_src


#+begin_src emacs-lisp
  (use-package sbt-mode
    :straight t
    :commands sbt-start sbt-command
    :config
    ;; ;; WORKAROUND: allows using SPACE when in the minibuffer
    ;; (substitute-key-definition
    ;;  'minibuffer-complete-word
    ;;  'self-insert-command
    ;;  minibuffer-local-completion-map)
    )

  (use-package scala-mode
    :straight t
    :interpreter
    ("scala" . scala-mode))

  ;; (use-package lsp-metals
  ;;   :straight t
  ;;   ;; :ensure t
  ;;   ;; :custom
  ;;   ;; Metals claims to support range formatting by default but it supports range
  ;;   ;; formatting of multiline strings only. You might want to disable it so that
  ;;   ;; emacs can use indentation provided by scala-mode.
  ;;   ;;(lsp-metals-server-args '("-J-Dmetals.allow-multiline-string-formatting=off"))
  ;;   :hook (scala-mode . lsp-deferred))
#+end_src

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :defer t
    :commands (magit-dispatch)
    :init
    (leaders/main "g" 'magit-dispatch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :config
    (transient-append-suffix 'magit-dispatch "r"
      '("s" "Status" magit-status))

    ;; TODO: Add quite to all transient prefixes
    (transient-append-suffix 'magit-dispatch "!"
      '("q" "quit" transient-quit-one))
    (transient-append-suffix 'magit-file-dispatch "V"
      '("q" "quit" transient-quit-one))

    (transient-append-suffix 'magit-dispatch "!"
      '("$" "process" magit-process-buffer))

    (transient-append-suffix 'magit-dispatch "\""
      '("." "+File" magit-file-dispatch)))

  (use-package diff-hl
    :disabled
    :straight t
    :config
    (global-diff-hl-mode)
    (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)

    (general-define-key
     :states 'normal
     "]g" 'diff-hl-next-hunk
     "[g" 'diff-hl-previous-hunk))

  (use-package git-gutter
    :straight t
    :after magit
    :custom
    (git-gutter:update-interval 2)
    :config
    (general-define-key
     :states 'normal
     "]g" 'git-gutter:next-hunk
     "[g" 'git-gutter:previous-hunk)

    (transient-define-prefix git-gutter-dispatch ()
      "Operate with hunks."
      ["Git-gutter"
       ("r" "Revert" git-gutter:revert-hunk)
       ("s" "Stage"  git-gutter:stage-hunk)
       ("p" "Popup"  git-gutter:popup-hunk)])

    (transient-append-suffix 'magit-dispatch "F"
      '("h" "Hunk" git-gutter-dispatch))

    (global-git-gutter-mode 1))

  (use-package git-link
    :straight t
    :defer t
    :commands 'git-link
    :after magit
    :config
    (setq git-link-open-in-browser t)
    (transient-append-suffix 'magit-dispatch "F"
      '("g" "Link" git-link)))

  (use-package magit-todos
    :straight t
    :after magit
    :init (magit-todos-mode 1)
    :hook (magit-status-mode . magit-todos-mode))
#+end_src

** Rainbow Delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Rainbow mode(colors)

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :straight t
    :defer t
    :hook (org-mode
           prog-mode))
#+end_src

* Org Mode
** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (f-filename (buffer-file-name))
                        "emacs.org")
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (shell . t)
       (clojure . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src

** Better Font Faces

#+begin_src emacs-lisp
  (defun org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1))))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Basic Config

#+begin_src emacs-lisp

  (defun org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :straight t
    :hook (org-mode . org-mode-setup)
    :config
    (use-package org-contrib
      :straight t
      :ensure org-contrib)

    (setf (cdr (assoc 'file org-link-frame-setup)) 'find-file)

    (setq org-ellipsis " ▾")
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-agenda-skip-deadline-prewarning-if-scheduled t)

    (setq org-agenda-files '("~/Notes/roam/org_tasks.org"
                             "~/Notes/roam/org_birthdays.org"
                             "~/Notes/roam/org_inbox.org"
                             "~/Notes/roam/org_work.org"
                             ))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "ACTIVE(a)" "HOLD(h)" "|" "DONE(d!)")))

    (setq org-refile-targets
          '(
            ("tasks.org" :maxlevel . 1)
            ("work.org" :maxlevel . 1)
            ))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
          '((:startgroup)
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("@home" . ?h)
            ("@work" . ?w)
            ("planning" . ?p)
            ("book" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))


    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(
            ("N" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Workflow Status"
             ((todo "TODO"
                    ((org-agenda-overriding-header "TODO")
                     (org-agenda-files org-agenda-files)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "NEXT")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "HOLD"
                    ((org-agenda-overriding-header "ON HOLD")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))))

            ("p" "Planning"
             ((tags-todo "planning")))

            ("b" "Books"
             ((tags-todo "book")))

            ("i" "Ideas"
             ((tags-todo "idea")))

            ("n" "Notes"
             ((tags-todo "note")))

            ("h" "Home"
             ((tags-todo "@home")))

            ("w" "Working tasks"
             ((alltodo "" ((org-agenda-files '("~/Notes/roam/org_work.org"))))
              (tags-todo "@work" )))))

    (setq org-capture-templates
          `(("t" "Task" entry (file+olp "~/Notes/roam/org_inbox.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("C" "Task" entry (file+olp "~/Notes/roam/org_inbox.org" "Inbox")
             "* TODO %L %?\n  %U\n" :empty-lines 1)

            ("m" "Meeting" entry
             (file+olp+datetree "~/Notes/roam/org_meeting.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("e" "Checking Email" entry (file+olp+datetree "~/Notes/roam/org_email.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("w" "Weight" table-line (file+headline "~/Notes/roam/org_metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (org-font-setup))

#+end_src


** Center Org Buffers

#+begin_src emacs-lisp
  (defun org-mode-visual-fill ()
    (setq visual-fill-column-width 100
            visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :straight t
    :hook (org-mode . org-mode-visual-fill))
#+end_src

** Keybindings

#+begin_src emacs-lisp

  (use-package evil-org
    :straight t
    :after (org evil)
    :hook ((org-mode . evil-org-mode)
           (org-agenda-mode . evil-org-mode))
    :config

    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)

    (defhydra hydra-timestamp-scroll ()
      "scale text"
      ("k" org-timestamp-up "up")
      ("j" org-timestamp-down "down")
      ("f" nil "finished" :exit t)
      ("q" nil "finished" :exit t))

    (leaders/main
      "ct" '(:ignore t :which-key "task")
      "ct" (lambda () (interactive) (org-capture nil "t"))
      "cw" '(:ignore t :which-key "weight")
      "cw" (lambda () (interactive) (org-capture nil "w"))
      "cm" '(:ignore t :which-key "meeting")
      "cm" (lambda () (interactive) (org-capture nil "m"))
      "ce" '(:ignore t :which-key "email")
      "ce" (lambda () (interactive) (org-capture nil "e")))

    (leaders/main
      :keymaps 'org-mode-map
      "A" 'org-archive-subtree-default
      "e" 'org-edit-special
      "v" org-babel-map
      "it" 'org-time-stamp
      "iT" 'hydra-timestamp-scroll/body
      "id" 'org-deadline
      "il" 'org-insert-link
      "is" 'org-schedule
      "in" 'org-add-note
      "ip" 'org-priority
      "tl" 'org-toggle-link-display
      "ti" 'org-toggle-inline-images
      "x" (general-simulate-key "C-c C-x" :which-key "org-x")
      "SPC" 'org-toggle-checkbox)

    (general-define-key
     :states 'normal
     :keymaps 'org-mode-map
     "t" (general-simulate-key "C-c C-t" :which-key "org-todo")
     "T" 'org-set-tags-command
     "R" (general-simulate-key "C-c C-w" :which-key "org-refile"))

    (evil-define-key '(normal visual) 'evil-org-mode
      (kbd ">") 'org-shiftleft
      (kbd "<") 'org-shiftright)

    (general-define-key
     :states 'motion
     :keymaps 'org-mode-map
     "RET" 'org-open-at-point-global)

    (general-define-key
     :states 'visual
     :keymaps 'org-mode-map
     "RET" (lambda ()
             (interactive)
             (better-jumper-set-jump)
             (org-roam-node-insert)))

    (general-define-key
     :states '(motion normal)
     :keymaps 'org-agenda-mode-map
     (kbd "C-j") 'evil-window-down
     (kbd "C-k") 'evil-window-up
     (kbd "C-l") 'evil-window-right
     (kbd "C-h") 'evil-window-left)

    (setf evil-org-key-theme '(navigation todo insert textobjects additional))
    (setf org-special-ctrl-a/e t))
#+end_src

** Nicer Heading Bullets

#+begin_src emacs-lisp
  (use-package org-bullets
    :straight t
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Org Roam

#+begin_src emacs-lisp
  (use-package org-roam
    :straight t
    :after (evil org hydra)
    ;; :ensure t
    :custom
    (org-roam-directory (file-truename "~/Notes/roam/"))
    :config
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol)
    (setq org-return-follows-link t
          org-roam-mode-section-functions
          (list #'org-roam-backlinks-section
                #'org-roam-reflinks-section
                #'org-roam-unlinked-references-section))

    (defhydra hydra-dailies-scroll ()
      "scale text"
      ("j" org-roam-dailies-goto-next-note "next")
      ("k" org-roam-dailies-goto-previous-note "previous")
      ("f" nil "finished" :exit t)
      ("q" nil "finished" :exit t))

    (leaders/main
      "fj" '(org-roam-node-find :which-key "roam-journal")
      "f." '(org-roam-dailies-find-today :which-key "roam-today")
      "cr" '(org-roam-capture :which-key "capture-roam")
      "cj" '(org-roam-dailies-capture-today :which-key "capture-journal"))

    (leaders/main
      :keymaps 'org-mode-map
      "ir" '(org-roam-node-insert :which-key "roam-insert")
      "." '(org-roam-dailies-goto-today :which-key "roam-today")
      "o" '(:ignore t :which-key "org")
      "od" '(hydra-dailies-scroll/body :which-key "roam-dailies-scroll")
      "ol" '(org-roam-buffer-toggle :which-key "roam-links")
      "og" '(org-roam-graph :which-key "roam-graph")))

  ;; (use-package org-pandoc-import
  ;;   :straight (:host github
  ;;                    :repo "tecosaur/org-pandoc-import"
  ;;                    :files ("*.el" "filters" "preprocessors")))

  (defun org-roam-update-ids ()
    "Update all org-ids in org-roam-directory."
    (interactive)
    (org-id-update-id-locations
     (directory-files-recursively org-roam-directory "\\.org$")))
#+end_src

** Templates

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("go" . "src go"))
    (add-to-list 'org-structure-template-alist '("json" . "src json"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml")))
#+end_src

** Notifications

#+begin_src emacs-lisp
  (use-package org-notify
    :ensure nil
    :after org
    :config
    (org-notify-start))
#+end_src

* Other
** Epub

#+begin_src emacs-lisp
  (use-package nov
    :straight t
    :config
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src

** SSH socket

#+begin_src emacs-lisp
  (defun set-keyring-sock ()
    (interactive)
    (setenv "SSH_AUTH_SOCK" "/run/user/1000/keyring/ssh")
    (print (getenv "SSH_AUTH_SOCK")))

  (defun set-gpg-sock ()
    (interactive)
    (setenv "SSH_AUTH_SOCK" "/run/user/1000/gnupg/S.gpg-agent.ssh")
    (print (getenv "SSH_AUTH_SOCK")))

  (leaders/main
    "ts" '(:ignore t :which-key "ssh-auth-sock")
    "ts1" '(set-keyring-sock :which-key "Keyring")
    "ts2" '(set-gpg-sock :which-key "GPG"))
#+end_src

** IRC

#+begin_src emacs-lisp
  (use-package erc
    :straight t
    :disabled
    :config
    (setq erc-track-shorten-start 8
          erc-kill-buffer-on-part t
          erc-auto-query 'bury)
    (setq erc-track-remove-disconnected-buffers t)
    ;; (setq erc-hide-list '("PART" "QUIT" "JOIN"))
    (setq erc-autojoin-channels-alist '(("irc.libera.chat"
                                         "#systemcrafters"))
          erc-server "irc.libera.chat"
          erc-nick "ewk"
          erc-track '("NICK" "333" "353" "JOIN" "PART" "AWAY")))
#+end_src

* TODO
** Filetypes
- [X] Ansible
- [ ] CSV
- [X] Config
- [X] Clojure
- [X] Dockerfile
- [ ] Gitignore(*)
- [ ] Go(*)
- [ ] Java
- [X] Json
- [ ] Helm
- [ ] Log
- [ ] Lua
- [ ] Mail(*)
- [X] Markdown
- [X] Nix
- [X] Org(should be)
- [X] Python
- [ ] Puppet(*)
- [X] Rust
- [X] Shell
- [ ] SQL
- [X] Terraform
- [ ] Todo
- [ ] Vim(*)
- [ ] XML
- [ ] QF(-)
- [X] Trouble(-)
- [ ] Yaml

** Plugins
- [ ] Yank/Paste(*)
- [ ] Bufferline (like tabline)
- [ ] Indent-guides
- [X] Easyalign
- [ ] Split/Join
- [ ] Zeal(?)
- [ ] Codi
- [ ] Debug
- [ ] Text objects
- [ ] Quickscope or fF
- [ ] Wordmotion
- [ ] Repeat

** Scripts

- [ ] TODOs
- [ ] FoldText
- [ ] SmartCR
- [ ] Load localscript
