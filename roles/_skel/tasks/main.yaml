---
- name: "Import cleanup tasks"
  ansible.builtin.import_tasks: cleanup.yaml

- name: "Install"
  ansible.builtin.include_tasks: "install.yaml"

- name: "Create dirs"
  ansible.builtin.file:
    dest: "{{ item.dir }}"
    state: directory
    mode: "0755"
  loop:
    - {dir: "{{ folders.bin }}"}
    - {dir: "~/.config/fish/conf.d"}
    - {dir: "~/.config/i3/autostart.d/"}

- name: "Download"
  ansible.builtin.get_url:
    url: ""
    dest: ""
    mode: "0644"
    checksum: "sha256: cc9531f5aa6fe3a034e3d76d6520e1613695c19448a7a003fc216bc9dbb4ec02"

- name: "Provide configs"
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "0644"
  loop:
    - {src: "", dest: "~/.config/fish/conf.d/"}

- name: "Provide scripts"
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ folders.bin }}/{{ item.dest | default(item.src) }}"
    mode: "0755"
  loop:
    - {src: "", dest: ""}

- name: "Cleanup before install"
  ansible.builtin.file:
    path: ""
    state: absent

- name: Ensure bin directory structure exists
  ansible.builtin.file:
    path: "{{ folders.bin }}/{{ item.path }}"
    state: directory
    mode: "0755"
  with_community.general.filetree: "{{ role_path }}/templates/bin"
  when: item.state == 'directory'

- name: Ensure scripts are populated from templates
  ansible.builtin.template:
    src: '{{ item.src }}'
    dest: '{{ folders.bin }}/{{ item.path }}'
    mode: "0755"
  with_community.general.filetree: '{{ role_path }}/templates/bin'
  when: item.state == 'file'

- name: Ensure directory structure exists
  ansible.builtin.file:
    path: "~/.config/<STH>/{{ item.path }}"
    state: directory
    mode: "0755"
  with_community.general.filetree: "{{ role_path }}/templates/<STH>"
  when: item.state == 'directory'

- name: Ensure configs are populated from templates
  ansible.builtin.template:
    src: '{{ item.src }}'
    dest: '~/.config/<STH>/{{ item.path }}'
    mode: "0644"
  with_community.general.filetree: '{{ role_path }}/templates/<STH>'
  when: item.state == 'file'

- name: "Enable dbus"
  community.general.runit:
    name: dbus
    state: started
    enabled: true
  when: ansible_distribution == "Void"
  become: true
