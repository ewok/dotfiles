- import_tasks: cleanup.yaml

- name: "Install"
  tags:
    - passwords
    - pass
    - gpg
  block:

    - name: "Aliases"
      copy:
        content: |
          #!/bin/bash
          {{item.cmd}}
        dest: "~/.local/bin/{{item.alias}}"
        mode: 0755
      loop:
        - {alias: "1password", cmd: 'toolbox run -c gui 1password "$@"'}
        - {alias: "keepassxc", cmd: 'toolbox run -c os keepassxc "$@"'}

    - name: "1Password Desktop entry"
      copy:
        content: |
          [Desktop Entry]
          Categories=Utility
          Comment=1Password
          Exec=toolbox run -c gui 1password
          Name=1Password
          Terminal=false
          Type=Application
        dest: "~/.local/share/applications/1password.desktop"
      tags:
        - 1password

    # 1Password Cli
    - name: "Download op"
      ansible.builtin.get_url:
        url: "https://cache.agilebits.com/dist/1P/op/pkg/v1.12.3/op_linux_amd64_v1.12.3.zip"
        dest: "~/.cache/rpms/op.zip"
        remote_src: yes
        checksum: "sha256:947df336974f1b16b2fad50fe1621799348a8316758fd733f58b4671f6b08990"

    - name: "Install op"
      ansible.builtin.unarchive:
        src: "~/.cache/rpms/op.zip"
        dest: "~/.local/bin"
        mode: 0755
        exclude:
          - "op.sig"

    - name: "Rofi 1pass integration"
      template:
        src: "rofi-1pass"
        dest: "~/.local/bin/rofi-1pass"
        mode: 0755

    - name: "op-session"
      copy:
        content: |
          #!/bin/env bash
          set -e
          if [ "$1" == "signin" ]; then
            op $*
          elif [ "$1" == "refresh" ]; then
            touch ~/.cache/op-session
            export OP_SESSION_my=$(cat ~/.cache/op-session)
            if ! op get account &> /dev/null; then
              echo "Session is not initialized."
            else
              echo "Session is refreshed."
            fi
          else
            touch ~/.cache/op-session
            export OP_SESSION_my=$(cat ~/.cache/op-session)
            if ! op get account &> /dev/null; then
              pinentry << EOS | grep -oP 'D \K.*' | op signin my --raw > ~/.cache/op-session
          SETDESC Enter your 1password master password:
          SETPROMPT Master Password:
          GETPIN
          EOS
              export OP_SESSION_my=$(cat ~/.cache/op-session)
            fi
            op $*
          fi
        dest: "~/.local/bin/op-session"
        mode: 0755

    - name: "op-ping.service"
      copy:
        content: |
          [Service]
          CPUSchedulingPolicy=idle
          IOSchedulingClass=idle
          ExecStart={{ lookup('env', 'HOME') }}/.local/bin/op-session refresh
          [Unit]
          Description=Ping op
          Requisite=sway-session.target
        dest: "~/.config/systemd/user/op-ping.service"
      notify: "reload op-ping.service"

    - name: "enable op-ping.service"
      ignore_errors: True
      systemd:
        daemon_reload: True
        scope: user
        enabled: True
        name: "op-ping.service"

    - name: "op-ping.timer"
      copy:
        content: |
          [Install]
          WantedBy=timers.target
          WantedBy=sway-session.target
          [Timer]
          OnCalendar=*:0/20
          Persistent=true
          Unit=op-ping.service
          [Unit]
          Description=Ping op timer
          Requisite=sway-session.target
          PartOf=sway-session.target
        dest: "~/.config/systemd/user/op-ping.timer"
      notify: "reload op-ping.timer"

    - name: "start op-ping.timer"
      ignore_errors: True
      systemd:
        daemon_reload: True
        scope: user
        enabled: True
        name: "op-ping.timer"
        state: started

    # All about Yubikey
    - name: "yubikey-reset"
      copy:
        content: |
          #!/bin/bash

          prompt=$(sudo -nv 2>&1)
          if [ $? -eq 0 ]; then
            echo "Sudo priveleges available."
          elif echo $prompt | grep -q '^sudo:'; then
            echo "$(rofi_run -password -dmenu -p 'Sudo password' -l 0 -sidebar -width 20)" | sudo -S echo "Granted"
          else
            rofi_run -dmenu -mesg "You don't have sudo priveleges." -a "rofi-ykman"
            exit 1
          fi

          set -euo pipefail
          IFS=$'\n\t'

          VENDOR="1050"
          PRODUCT="0407"

          for DIR in $(find /sys/bus/usb/devices/ -maxdepth 1 -type l); do
            if [[ -f $DIR/idVendor && -f $DIR/idProduct &&
                  $(cat $DIR/idVendor) == $VENDOR && $(cat $DIR/idProduct) == $PRODUCT ]]; then
              echo 0 | sudo tee -a $DIR/authorized
              sleep 0.5
              echo 1 | sudo tee -a $DIR/authorized
            fi
          done

          notify-send -t 5000 "Reset"
        dest: "~/.local/bin/yubikey-reset"
        mode: 0755

    - name: "ykman-otp"
      copy:
        content: |
          #!/bin/bash

          set -euo pipefail

          PASS=""
          if [ ! "$(ykman info)" ]
          then
              rofi_run -dmenu -mesg "Yubikey not detected." -a "rofi-ykman"
              exit 1
          else
              PASS_ENABLED=$(ykman oath info | grep "Password protection" | awk '{print $3}')
              if [ "$PASS_ENABLED" == "enabled" ]
              then
                  PASS="-p $(rofi_run -password -dmenu -p 'Vault Password' -l 0 -sidebar -width 20)"
              fi
          fi

          OPTIONS=$(ykman oath accounts list $PASS)
          LAUNCHER="rofi_run -dmenu -i -p YubikeyOATH"

          option=`echo "${OPTIONS/, TOTP/\n}" | $LAUNCHER`
          code=$(ykman oath accounts code $PASS "$option")
          IFS=', ' read -r -a code <<< "$code"
          echo "${code[-1]}" | wl-copy

          notify-send -t 5000 "${code[-1]}"
        dest: "~/.local/bin/ykman-otp"
        mode: 0755

    - name: "Enable pcscd"
      become: True
      ignore_errors: True
      systemd:
        name: pcscd
        enabled: True
        daemon_reload: True
        state: started

    - name: "Provide config dir"
      file:
        dest: "~/.gnupg"
        state: directory
        mode: 0700

    - name: "Provide gpg-agent config"
      copy:
        content: |
          enable-ssh-support
          default-cache-ttl 34560000
          max-cache-ttl 34560000
          allow-loopback-pinentry
          pinentry-program /usr/bin/pinentry-gnome3
        dest: "~/.gnupg/gpg-agent.conf"

    - name: "Provide gpg config"
      copy:
        content: |
          keyserver hkp://keys.gnupg.net
          no-tty
          use-agent
          trust-model tofu+pgp
        dest: "~/.gnupg/gpg.conf"

    - name: "Provide scdaemon config"
      copy:
        content: |
          disable-ccid
          card-timeout 1
          reader-port Yubico Yubi
        dest: "~/.gnupg/scdaemon.conf"

    - name: "Enable current user to use smart cards"
      ignore_errors: True
      become: True
      copy:
        content: |
          polkit.addRule(function(action, subject) {
            if (action.id == "org.debian.pcsc-lite.access_pcsc" &&
              subject.user == "{{username}}" ) {
                return polkit.Result.YES;
            }
          });

          {% for reader in smart_readers %}
          polkit.addRule(function(action, subject) {
            if (action.id == "org.debian.pcsc-lite.access_card" &&
              action.lookup("reader") == '{{reader.name}}' &&
              subject.user == "{{username}}" ) {
                return polkit.Result.YES;
            }
          });
          {% endfor %}
        dest: "/etc/polkit-1/rules.d/10-{{username}}-org.debian.pcsc-lite.rules"

    - name: "Disable old thinkpad reader"
      ignore_errors: True
      become: True
      copy:
        content: |
          SUBSYSTEM=="usb", ACTION=="add", ATTR{removable}=="fixed", ATTR{idVendor}=="058f", ATTR{idProduct}=="9540", ATTR{authorized}="0"
          SUBSYSTEM=="usb", ACTION=="change", ATTR{removable}=="fixed", ATTR{idVendor}=="058f", ATTR{idProduct}=="9540", ATTR{authorized}="0"
        dest: "/etc/udev/rules.d/01-disable-alcor-micro.rules"

    - name: "Disable gpg-agent"
      changed_when: False
      ignore_errors: True
      systemd:
        name: gpg-agent
        scope: user
        enabled: False
        state: stopped

    - name: "Install Seahorse"
      community.general.flatpak:
        name: org.gnome.seahorse.Application
        state: present
        executable: "~/.local/bin/flatpak-internal"

    - name: "Setup askpass(fish)"
      tags:
        - fish
      copy:
        content: |
          if test -z $TB
            set -gx SSH_ASKPASS /var/lib/flatpak/app/org.gnome.seahorse.Application/x86_64/stable/active/files/libexec/seahorse/ssh-askpass
            set -gx SSH_ASKPASS_REQUIRE prefer
          end
        dest: "~/.config/fish/conf.d/10_ssh_askpass.fish"

    - name: "gpg-reload"
      copy:
        content: |
          #!/bin/bash
          set -x
          yubikey-reset
          pkill scdaemon
          pkill gpg-agent
          gpg-connect-agent /bye >/dev/null 2>&1
          gpg-connect-agent updatestartuptty /bye >/dev/null 2>&1
          gpgconf --reload gpg-agent
          gpg --card-status
          notify-send -t 3000 "GPG reloaded" || true
        dest: "~/.local/bin/gpg-reload"
        mode: 0755

    - name: "sudo tweaks"
      ignore_errors: True
      become: True
      copy:
        content: |
          Defaults                    !tty_tickets
          Defaults                    timestamp_timeout=30
        dest: "/etc/sudoers.d/10-tweaks"

    - name: "Enable gnome_keyring autounlock"
      become: True
      ignore_errors: True
      community.general.pamd:
        name: login
        type: auth
        control: include
        module_path: postlogin
        new_control: optional
        new_type: auth
        new_module_path: pam_gnome_keyring.so
        state: after

    - name: "Enable gnome_keyring autounlock"
      become: True
      ignore_errors: True
      community.general.pamd:
        name: login
        type: session
        control: include
        module_path: postlogin
        new_control: optional
        new_type: session
        new_module_path: pam_gnome_keyring.so
        module_arguments: 'auto_start'
        state: after

    - name: "Autostart gnome-keyring"
      tags:
        - fish
      copy:
        content: |
          if command -vq -- gnome-keyring-daemon
            set -gx SSH_AUTH_SOCK (gnome-keyring-daemon --start | awk -F "=" '$1 == "SSH_AUTH_SOCK" { print $2 }')
          end
        dest: "~/.config/fish/conf.d/30_gnome_keyring.fish"

    - name: "Set gnupg ssh socket"
      tags:
        - fish
      copy:
        content: |
          function set-gpg-sock
            set -gx SSH_AUTH_SOCK (gpgconf --list-dirs agent-ssh-socket)
          end
        dest: "~/.config/fish/conf.d/40_set_gpg_sock.fish"

    - name: "Provide config dir"
      become: True
      file:
        dest: "/etc/selinux_custom"
        state: directory
        mode: 0755

    - name: "Enable login to run pam-gnome-keyring"
      become: True
      shell:
        chdir: "/etc/selinux_custom"
        creates: "/etc/selinux_custom/enable-gkr-pam.pp"
        cmd: |
          echo 'type=AVC msg=audit(1636575741.864:242): avc:  denied  { execute } for  pid=2040 comm="login" name="gnome-keyring-daemon" dev="dm-0" ino=2442485 scontext=system_u:system_r:local_login_t:s0-s0:c0.c1023 tcontext=system_u:object_r:gkeyringd_exec_t:s0 tclass=file permissive=0' | audit2allow -M enable-gkr-pam
          semodule -X 300 -i enable-gkr-pam.pp
